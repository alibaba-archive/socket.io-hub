// Generated by CoffeeScript 1.6.2
(function() {
  var Hub, Socket, exports, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Socket = require('socket.io/lib/socket');

  Hub = require('./hub');

  _ = require('underscore');

  Socket.prototype.$$emit = Socket.prototype.emit;

  Socket.prototype.subscribe = function() {
    var _this = this;

    if (Hub.adapterActive && !this.isSubscribed) {
      this.isSubscribed = true;
      return Hub.adapter.on(function(data) {
        if (_this.needSubEmit(data)) {
          delete data.pid;
          delete data.flags;
          return _this.$$emit.apply(_this, _.toArray(data));
        }
      });
    }
  };

  Socket.prototype.emit = function(ev) {
    var data;

    if (this.needAdapter()) {
      data = _.clone(arguments);
      data.pid = process.pid;
      data.flags = this.flags;
      Hub.adapter.pub(Hub.channel, data);
    }
    return this.$$emit.apply(this, arguments);
  };

  Socket.prototype.needAdapter = function() {
    if (Hub.adapterActive) {
      return true;
    } else {
      return false;
    }
  };

  Socket.prototype.needSubEmit = function(data) {
    var room, _ref;

    if (process.pid === data.pid) {
      return false;
    }
    if (data.flags.broadcast) {
      return true;
    }
    if (data.flags.endpoint !== '') {
      room = data.flags.endpoint;
      if ((this.manager.rooms[room] != null) && (_ref = this.id, __indexOf.call(this.manager.rooms[room], _ref) >= 0)) {
        return true;
      }
    }
    return false;
  };

  exports = module.exports = Socket;

}).call(this);
