// Generated by CoffeeScript 1.6.2
(function() {
  var RedisAdapter, crypto, redis, sha1;

  redis = require('redis');

  crypto = require('crypto');

  sha1 = function(str) {
    return crypto.createHash('sha1').update(str.toString()).digest('hex');
  };

  RedisAdapter = (function() {
    function RedisAdapter(options) {
      var config;

      this.options = options;
      config = options.config || null;
      this.redisPubClient = redis.createClient(config);
      this.redisSubClient = redis.createClient(config);
    }

    RedisAdapter.prototype.pub = function(channel, data) {
      if (this.options.salt != null) {
        data._sign = this._signature(data, this.options.salt);
      }
      return this.redisPubClient.publish(channel, this._stringify(data));
    };

    RedisAdapter.prototype.sub = function(channel, callback) {
      return this.redisSubClient.subscribe(channel);
    };

    RedisAdapter.prototype.on = function(callback) {
      var _this = this;

      return this.redisSubClient.on('message', function(channel, message) {
        var data, salt, sign;

        data = _this._parse(message);
        if ((data._sign != null) || (_this.options.salt != null)) {
          sign = data._sign || '';
          salt = _this.options.salt || '';
          delete data._sign;
          if (sign !== _this._signature(data, salt)) {
            return false;
          }
        }
        return callback(data);
      });
    };

    RedisAdapter.prototype.close = function() {
      this.redisPubClient.end();
      return this.redisSubClient.end();
    };

    RedisAdapter.prototype._signature = function(data, salt) {
      return sha1(this._stringify(data) + salt);
    };

    RedisAdapter.prototype._stringify = function(data) {
      return JSON.stringify(data);
    };

    RedisAdapter.prototype._parse = function(data) {
      var e, message;

      try {
        message = JSON.parse(data);
        return message;
      } catch (_error) {
        e = _error;
        return null;
      }
    };

    return RedisAdapter;

  })();

  module.exports = RedisAdapter;

}).call(this);
